move(1,2,1,0,1).
move(2,1,3,1,0).
move(3,2,1,1,2).
move(4,3,1,0,2).
move(5,2,2,1,1).
move(6,1,2,2,1).
switch(1,2,1).
switch(1,2,2).
switch(2,1,3).
switch(2,2,3).
switch(3,2,1).
switch(3,2,2).
switch(3,2,3).
switch(3,3,1).
switch(3,3,2).
switch(3,3,3).
switch(4,3,1).
switch(4,3,2).
switch(4,3,3).
switch(5,2,2).
switch(5,2,3).
switch(5,3,2).
switch(5,3,3).
switch(6,1,2).
switch(6,1,3).
switch(6,2,2).
switch(6,2,3).
switch(6,3,2).
switch(6,3,3).
table(0,1,1,1).
table(0,1,2,-9).
table(0,1,3,-8).
table(0,2,1,-5).
table(0,2,2,-3).
table(0,2,3,6).
table(0,3,1,-7).
table(0,3,2,-4).
table(0,3,3,-2).
table(1,1,1,1).
table(1,1,2,-9).
table(1,1,3,-8).
table(1,2,1,3).
table(1,2,2,5).
table(1,2,3,6).
table(1,3,1,-7).
table(1,3,2,-4).
table(1,3,3,-2).
table(2,1,1,1).
table(2,1,2,-9).
table(2,1,3,-6).
table(2,2,1,3).
table(2,2,2,5).
table(2,2,3,8).
table(2,3,1,-7).
table(2,3,2,-4).
table(2,3,3,-2).
table(3,1,1,1).
table(3,1,2,-9).
table(3,1,3,-6).
table(3,2,1,2).
table(3,2,2,4).
table(3,2,3,7).
table(3,3,1,-8).
table(3,3,2,-5).
table(3,3,3,-3).
table(4,1,1,1).
table(4,1,2,-9).
table(4,1,3,-6).
table(4,2,1,2).
table(4,2,2,4).
table(4,2,3,7).
table(4,3,1,3).
table(4,3,2,5).
table(4,3,3,8).
table(5,1,1,1).
table(5,1,2,-9).
table(5,1,3,-6).
table(5,2,1,2).
table(5,2,2,-8).
table(5,2,3,-5).
table(5,3,1,3).
table(5,3,2,-7).
table(5,3,3,-4).
table(6,1,1,1).
table(6,1,2,4).
table(6,1,3,7).
table(6,2,1,2).
table(6,2,2,5).
table(6,2,3,8).
table(6,3,1,3).
table(6,3,2,6).
table(6,3,3,9).
writeL([]).
writeL([X|Y]):- write(X), writeL(Y). 


writeS(A) :- number(A), A < 0, !, write(A).
writeS(A) :- write(' '), write(A). 

printSwitch(K,X,Y):-
    (switch(K,X,Y) ->
    writeS('*');
    writeS('-')).

printRow(K,X,Y):-
    table(K,X,Y,V),
    writeS(V).

printTable(K) :- 
    forall(member(Y,[1,2,3]),
        ( forall(member(X,[1,2,3]), printRow(K,X,Y)),nl)
    ), 
    nl. 

printSwitch(K) :- 
    forall(member(Y,[1,2,3]),
        ( forall(member(X,[1,2,3]), printSwitch(K,X,Y)),nl)
    ), 
    nl. 

start :- 
    consult('tmp/foutput.tmp'), 
    writeL(['initial state:']),nl,
    printTable(0),
    printMoves(1). 

printMoves(K) :- 
    move(K,_X,_Y,_R,_D), 
    !,
    %XX is X + R,
    %YY is Y + D,
    %writeL(['move ',K,': (',X,',',Y,') to (',XX,',',YY,')']),nl,nl,
    writeL(['move ',K,': ']),nl,nl,
    printSwitch(K),
    printTable(K),
    KK is K+1,
    printMoves(KK).

printMoves(_) :- 
    write('finish'),nl. 



